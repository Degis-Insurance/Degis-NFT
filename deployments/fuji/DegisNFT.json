{
  "address": "0xFEB661d20d01d378A05E46219C3c947aa7Fa8f6D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_degis",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AirdropClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AllowlistSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "PublicSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseUri",
          "type": "string"
        }
      ],
      "name": "SetBaseURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldStatus",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStatus",
          "type": "uint256"
        }
      ],
      "name": "StatusChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "WithdrawERC20",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEG",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXAMOUNT_ALLOWLIST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXAMOUNT_PUBLICSALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_ALLOWLIST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_PUBLICSALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STATUS_AIRDROP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STATUS_ALLOWLIST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STATUS_INIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STATUS_PUBLICSALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "airdropClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "airdropMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "airdroplistClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowlistMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowlistMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "allowlistSale",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintedOnPublic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "ownerMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "publicSale",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setAirdropMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setAllowlistMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deg",
          "type": "address"
        }
      ],
      "name": "setDEG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newStatus",
          "type": "uint256"
        }
      ],
      "name": "setStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x694a3ff6390857cdb4f7e3e5a8b0f45a6c489d56d5f0faa74f573d3a62a9601c",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xFEB661d20d01d378A05E46219C3c947aa7Fa8f6D",
    "transactionIndex": 1,
    "gasUsed": "2727823",
    "logsBloom": "0x
    "blockHash": "0x22e51fe38e9b098a67db6af1b7e373d73f855c43f8e48c741cd0f37b7f2d3347",
    "transactionHash": "0x694a3ff6390857cdb4f7e3e5a8b0f45a6c489d56d5f0faa74f573d3a62a9601c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10290788,
        "transactionHash": "0x694a3ff6390857cdb4f7e3e5a8b0f45a6c489d56d5f0faa74f573d3a62a9601c",
        "address": "0xFEB661d20d01d378A05E46219C3c947aa7Fa8f6D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001be1a151ba3d24f594ee971dc9b843f23b5ba80e"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x22e51fe38e9b098a67db6af1b7e373d73f855c43f8e48c741cd0f37b7f2d3347"
      }
    ],
    "blockNumber": 10290788,
    "cumulativeGasUsed": "2766963",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x063729Efb831B8fE06dD4e46b4c11cC3e7be6DB9"
  ],
  "numDeployments": 2,
  "solcInputHash": "95d93d57658a4d80947470cd5607e416",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_degis\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AirdropClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AllowlistSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"PublicSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"SetBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStatus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStatus\",\"type\":\"uint256\"}],\"name\":\"StatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"WithdrawERC20\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXAMOUNT_ALLOWLIST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXAMOUNT_PUBLICSALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_ALLOWLIST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PUBLICSALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATUS_AIRDROP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATUS_ALLOWLIST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATUS_INIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATUS_PUBLICSALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"airdropClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdroplistClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlistMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"allowlistSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedOnPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"publicSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setAirdropMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setAllowlistMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deg\",\"type\":\"address\"}],\"name\":\"setDEG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStatus\",\"type\":\"uint256\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowlistSale(uint256,bytes32[])\":{\"params\":{\"_quantity\":\"amount of NFTs to mint\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"The initial status is Init (default as zero)\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerMint(address,uint256)\":{\"params\":{\"_quantity\":\"Amount of NFTs to mint\"}},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"publicSale(uint256)\":{\"params\":{\"_quantity\":\"amount of NFTs to mint\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"params\":{\"baseURI_\":\"New base URI for the collection\"}},\"setStatus(uint256)\":{\"details\":\"Only by the owner\",\"params\":{\"_newStatus\":\"New minting status\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawERC20(address,uint256)\":{\"params\":{\"_amount\":\"amount to withdraw\",\"_token\":\"ERC20 to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"airdropClaim(bytes32[])\":{\"notice\":\"Claimable NFTs\"},\"allowlistSale(uint256,bytes32[])\":{\"notice\":\"Allowlist minting\"},\"constructor\":{\"notice\":\"Constructor\"},\"ownerMint(address,uint256)\":{\"notice\":\"Owner minting\"},\"publicSale(uint256)\":{\"notice\":\"public sale mint. Allowed to mint several times as long as total per wallet is bellow maxPublicSale\"},\"setBaseURI(string)\":{\"notice\":\"Set the base URI for the NFTs\"},\"setStatus(uint256)\":{\"notice\":\"Change minting status\"},\"withdraw()\":{\"notice\":\"Withdraw avax by the owner\"},\"withdrawERC20(address,uint256)\":{\"notice\":\"Withdraw specificed ERC20 and amount to owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DegisNFT.sol\":\"DegisNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/DegisNFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract DegisNFT is ERC721, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    // Status defined as constants rather than enum\\n    uint256 public constant STATUS_INIT = 0;\\n    uint256 public constant STATUS_AIRDROP = 1;\\n    uint256 public constant STATUS_ALLOWLIST = 2;\\n    uint256 public constant STATUS_PUBLICSALE = 3;\\n\\n    // address public constant DEG = 0x9f285507Ea5B4F33822CA7aBb5EC8953ce37A645;\\n    address public DEG;\\n\\n    // Total supply: 500\\n    uint256 public constant MAX_SUPPLY = 500;\\n\\n    // Public sale price is 200 DEG\\n    uint256 public constant PRICE_PUBLICSALE = 200 ether;\\n    uint256 public constant PRICE_ALLOWLIST = 100 ether;\\n\\n    uint256 public constant MAXAMOUNT_PUBLICSALE = 5;\\n    uint256 public constant MAXAMOUNT_ALLOWLIST = 3;\\n\\n    // Current status of minting\\n    uint256 public status;\\n\\n    // Amount of NFTs already minted\\n    // Current tokenId\\n    uint256 public mintedAmount;\\n\\n    // wallet mapping that allows wallets to mint during airdrop and allowlist sale\\n    mapping(address => bool) public allowlistMinted;\\n    mapping(address => bool) public airdroplistClaimed;\\n\\n    // amount minted on public sale per wallet\\n    mapping(address => uint256) public mintedOnPublic;\\n\\n    string public baseURI;\\n\\n    // Merkle root of airdrop list\\n    bytes32 public airdropMerkleRoot;\\n\\n    // Merkle root of allowlist\\n    bytes32 public allowlistMerkleRoot;\\n\\n    event StatusChange(uint256 oldStatus, uint256 newStatus);\\n    event SetBaseURI(string baseUri);\\n    event WithdrawERC20(\\n        address indexed token,\\n        uint256 amount,\\n        address receiver\\n    );\\n    event AirdropClaim(address user, uint256 tokenId);\\n    event AllowlistSale(address user, uint256 quantity, uint256 tokenId);\\n    event PublicSale(address user, uint256 quantity, uint256 tokenId);\\n\\n    /**\\n     * @notice Constructor\\n     *\\n     * @dev The initial status is Init (default as zero)\\n     */\\n    constructor(address _degis) ERC721(\\\"DegisNFT\\\", \\\"DegisNFT\\\") {\\n        DEG = _degis;\\n    }\\n\\n    /**\\n     * @notice Change minting status\\n     *\\n     * @dev Only by the owner\\n     *\\n     * @param _newStatus New minting status\\n     */\\n    function setStatus(uint256 _newStatus) external onlyOwner {\\n        emit StatusChange(status, _newStatus);\\n        status = _newStatus;\\n    }\\n\\n    function setDEG(address _deg) external onlyOwner {\\n        require(_deg != address(0), \\\"Zero address\\\");\\n        DEG = _deg;\\n    }\\n\\n    /**\\n     * @notice Set the base URI for the NFTs\\n     *\\n     * @param  baseURI_ New base URI for the collection\\n     */\\n    function setBaseURI(string calldata baseURI_) external onlyOwner {\\n        baseURI = baseURI_;\\n        emit SetBaseURI(baseURI_);\\n    }\\n\\n    function setAirdropMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\n        airdropMerkleRoot = _merkleRoot;\\n    }\\n\\n    function setAllowlistMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\n        allowlistMerkleRoot = _merkleRoot;\\n    }\\n\\n    /**\\n     * @notice Owner minting\\n     * @param  _quantity Amount of NFTs to mint\\n     */\\n    function ownerMint(address _user, uint256 _quantity) external onlyOwner {\\n        require(mintedAmount < MAX_SUPPLY, \\\"Exceed max supply\\\");\\n        _mint(_user, _quantity);\\n    }\\n\\n    /**\\n     * @notice Claimable NFTs\\n     */\\n\\n    function airdropClaim(bytes32[] calldata _merkleProof) external {\\n        require(status == STATUS_AIRDROP, \\\"Not in airdrop phase\\\");\\n        require(!airdroplistClaimed[msg.sender], \\\"already claimed\\\");\\n        require(\\n            MerkleProof.verify(\\n                _merkleProof,\\n                airdropMerkleRoot,\\n                keccak256(abi.encodePacked(msg.sender))\\n            ),\\n            \\\"invalid merkle proof\\\"\\n        );\\n        airdroplistClaimed[msg.sender] = true;\\n\\n        _mint(msg.sender, 1);\\n\\n        emit AirdropClaim(msg.sender, mintedAmount);\\n    }\\n\\n    /**\\n     * @notice Allowlist minting\\n     * @param  _quantity amount of NFTs to mint\\n     */\\n\\n    function allowlistSale(uint256 _quantity, bytes32[] calldata _merkleProof)\\n        external\\n        payable\\n    {\\n        require(status == STATUS_ALLOWLIST, \\\"Not in allowlist sale phase\\\");\\n        require(!allowlistMinted[msg.sender], \\\"already minted\\\");\\n        require(_quantity <= MAXAMOUNT_ALLOWLIST, \\\"Too many tokens\\\");\\n        require(\\n            MerkleProof.verify(\\n                _merkleProof,\\n                allowlistMerkleRoot,\\n                keccak256(abi.encodePacked(msg.sender))\\n            ),\\n            \\\"invalid merkle proof\\\"\\n        );\\n\\n        uint256 amountToPay = _quantity * PRICE_ALLOWLIST;\\n\\n        // Transfer deg tokens\\n        IERC20(DEG).safeTransferFrom(msg.sender, address(this), amountToPay);\\n\\n        _mint(msg.sender, _quantity);\\n        allowlistMinted[msg.sender] = true;\\n\\n        emit AllowlistSale(msg.sender, _quantity, mintedAmount);\\n    }\\n\\n    /**\\n     * @notice  public sale mint. Allowed to mint several times as long as total per wallet is bellow maxPublicSale\\n     * @param  _quantity amount of NFTs to mint\\n     */\\n    function publicSale(uint256 _quantity) external payable {\\n        require(status == STATUS_PUBLICSALE, \\\"Not in public sale phase\\\");\\n        require(tx.origin == msg.sender, \\\"No proxy transactions\\\");\\n\\n        uint256 userAlreadyMinted = mintedOnPublic[msg.sender];\\n        require(\\n            userAlreadyMinted + _quantity <= MAXAMOUNT_PUBLICSALE,\\n            \\\"Max public sale amount reached\\\"\\n        );\\n        require(\\n            userAlreadyMinted + _quantity + mintedAmount <= MAX_SUPPLY,\\n            \\\"Max mint supply reached\\\"\\n        );\\n\\n        // DEG to pay for minting\\n        uint256 amountToPay = _quantity * PRICE_PUBLICSALE;\\n\\n        // Transfer DEG to this contract\\n        IERC20(DEG).safeTransferFrom(msg.sender, address(this), amountToPay);\\n\\n        _mint(msg.sender, _quantity);\\n\\n        unchecked {\\n            mintedOnPublic[msg.sender] += _quantity;\\n        }\\n\\n        emit PublicSale(msg.sender, _quantity, mintedAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw avax by the owner\\n     */\\n    function withdraw() external onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @notice Withdraw specificed ERC20 and amount to owner\\n     *\\n     * @param  _token  ERC20 to withdraw\\n     * @param  _amount amount to withdraw\\n     */\\n    function withdrawERC20(address _token, uint256 _amount) external onlyOwner {\\n        IERC20(_token).transfer(msg.sender, _amount);\\n        emit WithdrawERC20(_token, _amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice BaseURI\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @notice Mint multiple NFTs\\n     *\\n     * @param  _to     Address to mint NFTs to\\n     * @param  _amount Amount to mint\\n     */\\n    function _mint(address _to, uint256 _amount) internal override {\\n        uint256 alreadyMinted = mintedAmount;\\n\\n        for (uint256 i = 1; i <= _amount; ) {\\n            super._mint(_to, ++alreadyMinted);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        unchecked {\\n            mintedAmount += _amount;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e190d51c9c0218b4c892a2f93deea77546285f3dd23db871f143b0d80055cbd\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620030fb380380620030fb8339810160408190526200003491620001cc565b604080518082018252600880825267111959da5cd3919560c21b602080840182815285518087019096529285528401528151919291620000779160009162000126565b5080516200008d90600190602084019062000126565b505050620000aa620000a4620000d060201b60201c565b620000d4565b600780546001600160a01b0319166001600160a01b03929092169190911790556200023a565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200013490620001fe565b90600052602060002090601f016020900481019282620001585760008555620001a3565b82601f106200017357805160ff1916838001178555620001a3565b82800160010185558215620001a3579182015b82811115620001a357825182559160200191906001019062000186565b50620001b1929150620001b5565b5090565b5b80821115620001b15760008155600101620001b6565b600060208284031215620001df57600080fd5b81516001600160a01b0381168114620001f757600080fd5b9392505050565b600181811c908216806200021357607f821691505b6020821081036200023457634e487b7160e01b600052602260045260246000fd5b50919050565b612eb1806200024a6000396000f3fe6080604052600436106102f25760003560e01c80638059f60e1161018f578063c87b56dd116100e1578063e81ed0441161008a578063f7d4b1d311610064578063f7d4b1d3146107f5578063f95df41414610815578063fb4bcd4f1461083557600080fd5b8063e81ed0441461075c578063e985e9c51461078c578063f2fde38b146107d557600080fd5b8063e231c19a116100bb578063e231c19a14610709578063e3b93b601461071c578063e6c6f28a1461073c57600080fd5b8063c87b56dd1461069f578063d230e45b146106bf578063e0509b8a146106ec57600080fd5b80639e46c86e11610143578063a5ce30d21161011d578063a5ce30d214610656578063b287c8ed1461066c578063b88d4fde1461067f57600080fd5b80639e46c86e14610601578063a1db978214610616578063a22cb4651461063657600080fd5b80638daa1fc4116101745780638daa1fc4146105a757806390cc02d7146105bc57806395d89b41146105ec57600080fd5b80638059f60e146105745780638da5cb5b1461058957600080fd5b8063450b821c116102485780636352211e116101fc5780636c0360eb116101d65780636c0360eb1461052a57806370a082311461053f578063715018a61461055f57600080fd5b80636352211e146104cd57806364cac1b0146104ed57806369ba1a751461050a57600080fd5b8063484b973c1161022d578063484b973c1461047857806355f804b3146104985780635ec1bdb2146104b857600080fd5b8063450b821c1461046357806345ba6e551461046357600080fd5b806323b872dd116102aa57806332cb6b0c1161028457806332cb6b0c146104185780633ccfd60b1461042e57806342842e0e1461044357600080fd5b806323b872dd146103cc578063293108e0146103ec5780632d3802421461040257600080fd5b8063081812fc116102db578063081812fc1461034e578063095ea7b314610386578063200d2ed2146103a857600080fd5b806301ffc9a7146102f757806306fdde031461032c575b600080fd5b34801561030357600080fd5b5061031761031236600461288c565b610855565b60405190151581526020015b60405180910390f35b34801561033857600080fd5b506103416108f2565b6040516103239190612901565b34801561035a57600080fd5b5061036e610369366004612914565b610984565b6040516001600160a01b039091168152602001610323565b34801561039257600080fd5b506103a66103a1366004612949565b610a1e565b005b3480156103b457600080fd5b506103be60085481565b604051908152602001610323565b3480156103d857600080fd5b506103a66103e7366004612973565b610b4f565b3480156103f857600080fd5b506103be600f5481565b34801561040e57600080fd5b506103be60095481565b34801561042457600080fd5b506103be6101f481565b34801561043a57600080fd5b506103a6610bd6565b34801561044f57600080fd5b506103a661045e366004612973565b610c5f565b34801561046f57600080fd5b506103be600381565b34801561048457600080fd5b506103a6610493366004612949565b610c7a565b3480156104a457600080fd5b506103a66104b33660046129af565b610d35565b3480156104c457600080fd5b506103be600181565b3480156104d957600080fd5b5061036e6104e8366004612914565b610dd9565b3480156104f957600080fd5b506103be680ad78ebc5ac620000081565b34801561051657600080fd5b506103a6610525366004612914565b610e64565b34801561053657600080fd5b50610341610eff565b34801561054b57600080fd5b506103be61055a366004612a21565b610f8d565b34801561056b57600080fd5b506103a6611027565b34801561058057600080fd5b506103be600081565b34801561059557600080fd5b506006546001600160a01b031661036e565b3480156105b357600080fd5b506103be600581565b3480156105c857600080fd5b506103176105d7366004612a21565b600b6020526000908152604090205460ff1681565b3480156105f857600080fd5b5061034161108d565b34801561060d57600080fd5b506103be600281565b34801561062257600080fd5b506103a6610631366004612949565b61109c565b34801561064257600080fd5b506103a6610651366004612a4a565b6111c8565b34801561066257600080fd5b506103be600e5481565b6103a661067a366004612914565b6111d3565b34801561068b57600080fd5b506103a661069a366004612a97565b6113dc565b3480156106ab57600080fd5b506103416106ba366004612914565b61146a565b3480156106cb57600080fd5b506103be6106da366004612a21565b600c6020526000908152604090205481565b3480156106f857600080fd5b506103be68056bc75e2d6310000081565b6103a6610717366004612bbf565b611553565b34801561072857600080fd5b5060075461036e906001600160a01b031681565b34801561074857600080fd5b506103a6610757366004612c0b565b6117b5565b34801561076857600080fd5b50610317610777366004612a21565b600a6020526000908152604090205460ff1681565b34801561079857600080fd5b506103176107a7366004612c4d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156107e157600080fd5b506103a66107f0366004612a21565b611973565b34801561080157600080fd5b506103a6610810366004612a21565b611a52565b34801561082157600080fd5b506103a6610830366004612914565b611b24565b34801561084157600080fd5b506103a6610850366004612914565b611b83565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806108b857506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806108ec57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606000805461090190612c80565b80601f016020809104026020016040519081016040528092919081815260200182805461092d90612c80565b801561097a5780601f1061094f5761010080835404028352916020019161097a565b820191906000526020600020905b81548152906001019060200180831161095d57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610a025760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610a2982610dd9565b9050806001600160a01b0316836001600160a01b031603610ab25760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016109f9565b336001600160a01b0382161480610ace5750610ace81336107a7565b610b405760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109f9565b610b4a8383611be2565b505050565b610b593382611c50565b610bcb5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109f9565b610b4a838383611d47565b6006546001600160a01b03163314610c305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b60405133904780156108fc02916000818181858888f19350505050158015610c5c573d6000803e3d6000fd5b50565b610b4a838383604051806020016040528060008152506113dc565b6006546001600160a01b03163314610cd45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b6101f460095410610d275760405162461bcd60e51b815260206004820152601160248201527f457863656564206d617820737570706c7900000000000000000000000000000060448201526064016109f9565b610d318282611f14565b5050565b6006546001600160a01b03163314610d8f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b610d9b600d83836127dd565b507f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa8282604051610dcd929190612cba565b60405180910390a15050565b6000818152600260205260408120546001600160a01b0316806108ec5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016109f9565b6006546001600160a01b03163314610ebe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b60085460408051918252602082018390527f56b9afb61e8f2d641ea3720177708bb45f21f4066b16985d7d89b0152ae99109910160405180910390a1600855565b600d8054610f0c90612c80565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3890612c80565b8015610f855780601f10610f5a57610100808354040283529160200191610f85565b820191906000526020600020905b815481529060010190602001808311610f6857829003601f168201915b505050505081565b60006001600160a01b03821661100b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016109f9565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b031633146110815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b61108b6000611f4c565b565b60606001805461090190612c80565b6006546001600160a01b031633146110f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801561115c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111809190612ce9565b50604080518281523360208201526001600160a01b038416917f15e848750ab66cd66f07bebaf8dab757d6d4af0895afc4ff867f35baf163ee2d910160405180910390a25050565b610d31338383611f9e565b6003600854146112255760405162461bcd60e51b815260206004820152601860248201527f4e6f7420696e207075626c69632073616c65207068617365000000000000000060448201526064016109f9565b3233146112745760405162461bcd60e51b815260206004820152601560248201527f4e6f2070726f7879207472616e73616374696f6e73000000000000000000000060448201526064016109f9565b336000908152600c602052604090205460056112908383612d1c565b11156112de5760405162461bcd60e51b815260206004820152601e60248201527f4d6178207075626c69632073616c6520616d6f756e742072656163686564000060448201526064016109f9565b6009546101f4906112ef8484612d1c565b6112f99190612d1c565b11156113475760405162461bcd60e51b815260206004820152601760248201527f4d6178206d696e7420737570706c79207265616368656400000000000000000060448201526064016109f9565b600061135c680ad78ebc5ac620000084612d34565b600754909150611377906001600160a01b031633308461206c565b6113813384611f14565b336000818152600c6020908152604091829020805487019055600954825193845290830186905282820152517fa2efc6778c940a746d73c12a5ddad09940a78a6aeb5a42797127bfe6aeeef39d9181900360600190a1505050565b6113e63383611c50565b6114585760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109f9565b611464848484846120f4565b50505050565b6000818152600260205260409020546060906001600160a01b03166114f75760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016109f9565b600061150161217d565b90506000815111611521576040518060200160405280600081525061154c565b8061152b8461218c565b60405160200161153c929190612d53565b6040516020818303038152906040525b9392505050565b6002600854146115a55760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420696e20616c6c6f776c6973742073616c65207068617365000000000060448201526064016109f9565b336000908152600a602052604090205460ff16156116055760405162461bcd60e51b815260206004820152600e60248201527f616c7265616479206d696e74656400000000000000000000000000000000000060448201526064016109f9565b60038311156116565760405162461bcd60e51b815260206004820152600f60248201527f546f6f206d616e7920746f6b656e73000000000000000000000000000000000060448201526064016109f9565b6116cc82828080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600f546040516bffffffffffffffffffffffff193360601b16602082015290925060340190505b604051602081830303815290604052805190602001206122c1565b6117185760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206d65726b6c652070726f6f6600000000000000000000000060448201526064016109f9565b600061172d68056bc75e2d6310000085612d34565b600754909150611748906001600160a01b031633308461206c565b6117523385611f14565b336000818152600a6020908152604091829020805460ff191660011790556009548251938452908301879052908201527f5c69c6e855353a0556631b5f9b4e9d473e0f998841415d05f95dd6989faa869e9060600160405180910390a150505050565b6001600854146118075760405162461bcd60e51b815260206004820152601460248201527f4e6f7420696e2061697264726f7020706861736500000000000000000000000060448201526064016109f9565b336000908152600b602052604090205460ff16156118675760405162461bcd60e51b815260206004820152600f60248201527f616c726561647920636c61696d6564000000000000000000000000000000000060448201526064016109f9565b6118c682828080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600e546040516bffffffffffffffffffffffff193360601b16602082015290925060340190506116b1565b6119125760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206d65726b6c652070726f6f6600000000000000000000000060448201526064016109f9565b336000818152600b60205260409020805460ff191660019081179091556119399190611f14565b6009546040805133815260208101929092527f0109d8fbd8363b83a5fa0c0f8dfbed54c793803139c404e89bf3697f66bdc5059101610dcd565b6006546001600160a01b031633146119cd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b6001600160a01b038116611a495760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109f9565b610c5c81611f4c565b6006546001600160a01b03163314611aac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b6001600160a01b038116611b025760405162461bcd60e51b815260206004820152600c60248201527f5a65726f2061646472657373000000000000000000000000000000000000000060448201526064016109f9565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b03163314611b7e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b600f55565b6006546001600160a01b03163314611bdd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b600e55565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611c1782610dd9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611cc95760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109f9565b6000611cd483610dd9565b9050806001600160a01b0316846001600160a01b03161480611d1b57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611d3f5750836001600160a01b0316611d3484610984565b6001600160a01b0316145b949350505050565b826001600160a01b0316611d5a82610dd9565b6001600160a01b031614611dd65760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016109f9565b6001600160a01b038216611e515760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016109f9565b611e5c600082611be2565b6001600160a01b0383166000908152600360205260408120805460019290611e85908490612d82565b90915550506001600160a01b0382166000908152600360205260408120805460019290611eb3908490612d1c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60095460015b828111611f3e57611f3684611f2e84612d99565b9350836122d7565b600101611f1a565b505060098054909101905550565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603611fff5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109f9565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611464908590612419565b6120ff848484611d47565b61210b848484846124fe565b6114645760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109f9565b6060600d805461090190612c80565b6060816000036121cf57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156121f957806121e381612d99565b91506121f29050600a83612dc8565b91506121d3565b60008167ffffffffffffffff81111561221457612214612a81565b6040519080825280601f01601f19166020018201604052801561223e576020820181803683370190505b5090505b8415611d3f57612253600183612d82565b9150612260600a86612ddc565b61226b906030612d1c565b60f81b81838151811061228057612280612df0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506122ba600a86612dc8565b9450612242565b6000826122ce8584612655565b14949350505050565b6001600160a01b03821661232d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109f9565b6000818152600260205260409020546001600160a01b0316156123925760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109f9565b6001600160a01b03821660009081526003602052604081208054600192906123bb908490612d1c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600061246e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126c99092919063ffffffff16565b805190915015610b4a578080602001905181019061248c9190612ce9565b610b4a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016109f9565b60006001600160a01b0384163b1561264a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612542903390899088908890600401612e06565b6020604051808303816000875af192505050801561257d575060408051601f3d908101601f1916820190925261257a91810190612e42565b60015b612630573d8080156125ab576040519150601f19603f3d011682016040523d82523d6000602084013e6125b0565b606091505b5080516000036126285760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109f9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d3f565b506001949350505050565b600081815b84518110156126c157600085828151811061267757612677612df0565b6020026020010151905080831161269d57600083815260208290526040902092506126ae565b600081815260208490526040902092505b50806126b981612d99565b91505061265a565b509392505050565b6060611d3f8484600085856001600160a01b0385163b61272b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109f9565b600080866001600160a01b031685876040516127479190612e5f565b60006040518083038185875af1925050503d8060008114612784576040519150601f19603f3d011682016040523d82523d6000602084013e612789565b606091505b50915091506127998282866127a4565b979650505050505050565b606083156127b357508161154c565b8251156127c35782518084602001fd5b8160405162461bcd60e51b81526004016109f99190612901565b8280546127e990612c80565b90600052602060002090601f01602090048101928261280b5760008555612851565b82601f106128245782800160ff19823516178555612851565b82800160010185558215612851579182015b82811115612851578235825591602001919060010190612836565b5061285d929150612861565b5090565b5b8082111561285d5760008155600101612862565b6001600160e01b031981168114610c5c57600080fd5b60006020828403121561289e57600080fd5b813561154c81612876565b60005b838110156128c45781810151838201526020016128ac565b838111156114645750506000910152565b600081518084526128ed8160208601602086016128a9565b601f01601f19169290920160200192915050565b60208152600061154c60208301846128d5565b60006020828403121561292657600080fd5b5035919050565b80356001600160a01b038116811461294457600080fd5b919050565b6000806040838503121561295c57600080fd5b6129658361292d565b946020939093013593505050565b60008060006060848603121561298857600080fd5b6129918461292d565b925061299f6020850161292d565b9150604084013590509250925092565b600080602083850312156129c257600080fd5b823567ffffffffffffffff808211156129da57600080fd5b818501915085601f8301126129ee57600080fd5b8135818111156129fd57600080fd5b866020828501011115612a0f57600080fd5b60209290920196919550909350505050565b600060208284031215612a3357600080fd5b61154c8261292d565b8015158114610c5c57600080fd5b60008060408385031215612a5d57600080fd5b612a668361292d565b91506020830135612a7681612a3c565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612aad57600080fd5b612ab68561292d565b9350612ac46020860161292d565b925060408501359150606085013567ffffffffffffffff80821115612ae857600080fd5b818701915087601f830112612afc57600080fd5b813581811115612b0e57612b0e612a81565b604051601f8201601f19908116603f01168101908382118183101715612b3657612b36612a81565b816040528281528a6020848701011115612b4f57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008083601f840112612b8557600080fd5b50813567ffffffffffffffff811115612b9d57600080fd5b6020830191508360208260051b8501011115612bb857600080fd5b9250929050565b600080600060408486031215612bd457600080fd5b83359250602084013567ffffffffffffffff811115612bf257600080fd5b612bfe86828701612b73565b9497909650939450505050565b60008060208385031215612c1e57600080fd5b823567ffffffffffffffff811115612c3557600080fd5b612c4185828601612b73565b90969095509350505050565b60008060408385031215612c6057600080fd5b612c698361292d565b9150612c776020840161292d565b90509250929050565b600181811c90821680612c9457607f821691505b602082108103612cb457634e487b7160e01b600052602260045260246000fd5b50919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215612cfb57600080fd5b815161154c81612a3c565b634e487b7160e01b600052601160045260246000fd5b60008219821115612d2f57612d2f612d06565b500190565b6000816000190483118215151615612d4e57612d4e612d06565b500290565b60008351612d658184602088016128a9565b835190830190612d798183602088016128a9565b01949350505050565b600082821015612d9457612d94612d06565b500390565b600060018201612dab57612dab612d06565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082612dd757612dd7612db2565b500490565b600082612deb57612deb612db2565b500690565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b03808716835280861660208401525083604083015260806060830152612e3860808301846128d5565b9695505050505050565b600060208284031215612e5457600080fd5b815161154c81612876565b60008251612e718184602087016128a9565b919091019291505056fea2646970667358221220c35b580653be4a24afa61e99c775d67e473a604c672dfb378bc272bf7ba1e9fe64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106102f25760003560e01c80638059f60e1161018f578063c87b56dd116100e1578063e81ed0441161008a578063f7d4b1d311610064578063f7d4b1d3146107f5578063f95df41414610815578063fb4bcd4f1461083557600080fd5b8063e81ed0441461075c578063e985e9c51461078c578063f2fde38b146107d557600080fd5b8063e231c19a116100bb578063e231c19a14610709578063e3b93b601461071c578063e6c6f28a1461073c57600080fd5b8063c87b56dd1461069f578063d230e45b146106bf578063e0509b8a146106ec57600080fd5b80639e46c86e11610143578063a5ce30d21161011d578063a5ce30d214610656578063b287c8ed1461066c578063b88d4fde1461067f57600080fd5b80639e46c86e14610601578063a1db978214610616578063a22cb4651461063657600080fd5b80638daa1fc4116101745780638daa1fc4146105a757806390cc02d7146105bc57806395d89b41146105ec57600080fd5b80638059f60e146105745780638da5cb5b1461058957600080fd5b8063450b821c116102485780636352211e116101fc5780636c0360eb116101d65780636c0360eb1461052a57806370a082311461053f578063715018a61461055f57600080fd5b80636352211e146104cd57806364cac1b0146104ed57806369ba1a751461050a57600080fd5b8063484b973c1161022d578063484b973c1461047857806355f804b3146104985780635ec1bdb2146104b857600080fd5b8063450b821c1461046357806345ba6e551461046357600080fd5b806323b872dd116102aa57806332cb6b0c1161028457806332cb6b0c146104185780633ccfd60b1461042e57806342842e0e1461044357600080fd5b806323b872dd146103cc578063293108e0146103ec5780632d3802421461040257600080fd5b8063081812fc116102db578063081812fc1461034e578063095ea7b314610386578063200d2ed2146103a857600080fd5b806301ffc9a7146102f757806306fdde031461032c575b600080fd5b34801561030357600080fd5b5061031761031236600461288c565b610855565b60405190151581526020015b60405180910390f35b34801561033857600080fd5b506103416108f2565b6040516103239190612901565b34801561035a57600080fd5b5061036e610369366004612914565b610984565b6040516001600160a01b039091168152602001610323565b34801561039257600080fd5b506103a66103a1366004612949565b610a1e565b005b3480156103b457600080fd5b506103be60085481565b604051908152602001610323565b3480156103d857600080fd5b506103a66103e7366004612973565b610b4f565b3480156103f857600080fd5b506103be600f5481565b34801561040e57600080fd5b506103be60095481565b34801561042457600080fd5b506103be6101f481565b34801561043a57600080fd5b506103a6610bd6565b34801561044f57600080fd5b506103a661045e366004612973565b610c5f565b34801561046f57600080fd5b506103be600381565b34801561048457600080fd5b506103a6610493366004612949565b610c7a565b3480156104a457600080fd5b506103a66104b33660046129af565b610d35565b3480156104c457600080fd5b506103be600181565b3480156104d957600080fd5b5061036e6104e8366004612914565b610dd9565b3480156104f957600080fd5b506103be680ad78ebc5ac620000081565b34801561051657600080fd5b506103a6610525366004612914565b610e64565b34801561053657600080fd5b50610341610eff565b34801561054b57600080fd5b506103be61055a366004612a21565b610f8d565b34801561056b57600080fd5b506103a6611027565b34801561058057600080fd5b506103be600081565b34801561059557600080fd5b506006546001600160a01b031661036e565b3480156105b357600080fd5b506103be600581565b3480156105c857600080fd5b506103176105d7366004612a21565b600b6020526000908152604090205460ff1681565b3480156105f857600080fd5b5061034161108d565b34801561060d57600080fd5b506103be600281565b34801561062257600080fd5b506103a6610631366004612949565b61109c565b34801561064257600080fd5b506103a6610651366004612a4a565b6111c8565b34801561066257600080fd5b506103be600e5481565b6103a661067a366004612914565b6111d3565b34801561068b57600080fd5b506103a661069a366004612a97565b6113dc565b3480156106ab57600080fd5b506103416106ba366004612914565b61146a565b3480156106cb57600080fd5b506103be6106da366004612a21565b600c6020526000908152604090205481565b3480156106f857600080fd5b506103be68056bc75e2d6310000081565b6103a6610717366004612bbf565b611553565b34801561072857600080fd5b5060075461036e906001600160a01b031681565b34801561074857600080fd5b506103a6610757366004612c0b565b6117b5565b34801561076857600080fd5b50610317610777366004612a21565b600a6020526000908152604090205460ff1681565b34801561079857600080fd5b506103176107a7366004612c4d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156107e157600080fd5b506103a66107f0366004612a21565b611973565b34801561080157600080fd5b506103a6610810366004612a21565b611a52565b34801561082157600080fd5b506103a6610830366004612914565b611b24565b34801561084157600080fd5b506103a6610850366004612914565b611b83565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806108b857506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806108ec57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606000805461090190612c80565b80601f016020809104026020016040519081016040528092919081815260200182805461092d90612c80565b801561097a5780601f1061094f5761010080835404028352916020019161097a565b820191906000526020600020905b81548152906001019060200180831161095d57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610a025760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610a2982610dd9565b9050806001600160a01b0316836001600160a01b031603610ab25760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016109f9565b336001600160a01b0382161480610ace5750610ace81336107a7565b610b405760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109f9565b610b4a8383611be2565b505050565b610b593382611c50565b610bcb5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109f9565b610b4a838383611d47565b6006546001600160a01b03163314610c305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b60405133904780156108fc02916000818181858888f19350505050158015610c5c573d6000803e3d6000fd5b50565b610b4a838383604051806020016040528060008152506113dc565b6006546001600160a01b03163314610cd45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b6101f460095410610d275760405162461bcd60e51b815260206004820152601160248201527f457863656564206d617820737570706c7900000000000000000000000000000060448201526064016109f9565b610d318282611f14565b5050565b6006546001600160a01b03163314610d8f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b610d9b600d83836127dd565b507f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa8282604051610dcd929190612cba565b60405180910390a15050565b6000818152600260205260408120546001600160a01b0316806108ec5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016109f9565b6006546001600160a01b03163314610ebe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b60085460408051918252602082018390527f56b9afb61e8f2d641ea3720177708bb45f21f4066b16985d7d89b0152ae99109910160405180910390a1600855565b600d8054610f0c90612c80565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3890612c80565b8015610f855780601f10610f5a57610100808354040283529160200191610f85565b820191906000526020600020905b815481529060010190602001808311610f6857829003601f168201915b505050505081565b60006001600160a01b03821661100b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016109f9565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b031633146110815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b61108b6000611f4c565b565b60606001805461090190612c80565b6006546001600160a01b031633146110f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801561115c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111809190612ce9565b50604080518281523360208201526001600160a01b038416917f15e848750ab66cd66f07bebaf8dab757d6d4af0895afc4ff867f35baf163ee2d910160405180910390a25050565b610d31338383611f9e565b6003600854146112255760405162461bcd60e51b815260206004820152601860248201527f4e6f7420696e207075626c69632073616c65207068617365000000000000000060448201526064016109f9565b3233146112745760405162461bcd60e51b815260206004820152601560248201527f4e6f2070726f7879207472616e73616374696f6e73000000000000000000000060448201526064016109f9565b336000908152600c602052604090205460056112908383612d1c565b11156112de5760405162461bcd60e51b815260206004820152601e60248201527f4d6178207075626c69632073616c6520616d6f756e742072656163686564000060448201526064016109f9565b6009546101f4906112ef8484612d1c565b6112f99190612d1c565b11156113475760405162461bcd60e51b815260206004820152601760248201527f4d6178206d696e7420737570706c79207265616368656400000000000000000060448201526064016109f9565b600061135c680ad78ebc5ac620000084612d34565b600754909150611377906001600160a01b031633308461206c565b6113813384611f14565b336000818152600c6020908152604091829020805487019055600954825193845290830186905282820152517fa2efc6778c940a746d73c12a5ddad09940a78a6aeb5a42797127bfe6aeeef39d9181900360600190a1505050565b6113e63383611c50565b6114585760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109f9565b611464848484846120f4565b50505050565b6000818152600260205260409020546060906001600160a01b03166114f75760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016109f9565b600061150161217d565b90506000815111611521576040518060200160405280600081525061154c565b8061152b8461218c565b60405160200161153c929190612d53565b6040516020818303038152906040525b9392505050565b6002600854146115a55760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420696e20616c6c6f776c6973742073616c65207068617365000000000060448201526064016109f9565b336000908152600a602052604090205460ff16156116055760405162461bcd60e51b815260206004820152600e60248201527f616c7265616479206d696e74656400000000000000000000000000000000000060448201526064016109f9565b60038311156116565760405162461bcd60e51b815260206004820152600f60248201527f546f6f206d616e7920746f6b656e73000000000000000000000000000000000060448201526064016109f9565b6116cc82828080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600f546040516bffffffffffffffffffffffff193360601b16602082015290925060340190505b604051602081830303815290604052805190602001206122c1565b6117185760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206d65726b6c652070726f6f6600000000000000000000000060448201526064016109f9565b600061172d68056bc75e2d6310000085612d34565b600754909150611748906001600160a01b031633308461206c565b6117523385611f14565b336000818152600a6020908152604091829020805460ff191660011790556009548251938452908301879052908201527f5c69c6e855353a0556631b5f9b4e9d473e0f998841415d05f95dd6989faa869e9060600160405180910390a150505050565b6001600854146118075760405162461bcd60e51b815260206004820152601460248201527f4e6f7420696e2061697264726f7020706861736500000000000000000000000060448201526064016109f9565b336000908152600b602052604090205460ff16156118675760405162461bcd60e51b815260206004820152600f60248201527f616c726561647920636c61696d6564000000000000000000000000000000000060448201526064016109f9565b6118c682828080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600e546040516bffffffffffffffffffffffff193360601b16602082015290925060340190506116b1565b6119125760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206d65726b6c652070726f6f6600000000000000000000000060448201526064016109f9565b336000818152600b60205260409020805460ff191660019081179091556119399190611f14565b6009546040805133815260208101929092527f0109d8fbd8363b83a5fa0c0f8dfbed54c793803139c404e89bf3697f66bdc5059101610dcd565b6006546001600160a01b031633146119cd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b6001600160a01b038116611a495760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109f9565b610c5c81611f4c565b6006546001600160a01b03163314611aac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b6001600160a01b038116611b025760405162461bcd60e51b815260206004820152600c60248201527f5a65726f2061646472657373000000000000000000000000000000000000000060448201526064016109f9565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b03163314611b7e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b600f55565b6006546001600160a01b03163314611bdd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f9565b600e55565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611c1782610dd9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611cc95760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109f9565b6000611cd483610dd9565b9050806001600160a01b0316846001600160a01b03161480611d1b57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611d3f5750836001600160a01b0316611d3484610984565b6001600160a01b0316145b949350505050565b826001600160a01b0316611d5a82610dd9565b6001600160a01b031614611dd65760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016109f9565b6001600160a01b038216611e515760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016109f9565b611e5c600082611be2565b6001600160a01b0383166000908152600360205260408120805460019290611e85908490612d82565b90915550506001600160a01b0382166000908152600360205260408120805460019290611eb3908490612d1c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60095460015b828111611f3e57611f3684611f2e84612d99565b9350836122d7565b600101611f1a565b505060098054909101905550565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603611fff5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109f9565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611464908590612419565b6120ff848484611d47565b61210b848484846124fe565b6114645760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109f9565b6060600d805461090190612c80565b6060816000036121cf57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156121f957806121e381612d99565b91506121f29050600a83612dc8565b91506121d3565b60008167ffffffffffffffff81111561221457612214612a81565b6040519080825280601f01601f19166020018201604052801561223e576020820181803683370190505b5090505b8415611d3f57612253600183612d82565b9150612260600a86612ddc565b61226b906030612d1c565b60f81b81838151811061228057612280612df0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506122ba600a86612dc8565b9450612242565b6000826122ce8584612655565b14949350505050565b6001600160a01b03821661232d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109f9565b6000818152600260205260409020546001600160a01b0316156123925760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109f9565b6001600160a01b03821660009081526003602052604081208054600192906123bb908490612d1c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600061246e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126c99092919063ffffffff16565b805190915015610b4a578080602001905181019061248c9190612ce9565b610b4a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016109f9565b60006001600160a01b0384163b1561264a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612542903390899088908890600401612e06565b6020604051808303816000875af192505050801561257d575060408051601f3d908101601f1916820190925261257a91810190612e42565b60015b612630573d8080156125ab576040519150601f19603f3d011682016040523d82523d6000602084013e6125b0565b606091505b5080516000036126285760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109f9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d3f565b506001949350505050565b600081815b84518110156126c157600085828151811061267757612677612df0565b6020026020010151905080831161269d57600083815260208290526040902092506126ae565b600081815260208490526040902092505b50806126b981612d99565b91505061265a565b509392505050565b6060611d3f8484600085856001600160a01b0385163b61272b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109f9565b600080866001600160a01b031685876040516127479190612e5f565b60006040518083038185875af1925050503d8060008114612784576040519150601f19603f3d011682016040523d82523d6000602084013e612789565b606091505b50915091506127998282866127a4565b979650505050505050565b606083156127b357508161154c565b8251156127c35782518084602001fd5b8160405162461bcd60e51b81526004016109f99190612901565b8280546127e990612c80565b90600052602060002090601f01602090048101928261280b5760008555612851565b82601f106128245782800160ff19823516178555612851565b82800160010185558215612851579182015b82811115612851578235825591602001919060010190612836565b5061285d929150612861565b5090565b5b8082111561285d5760008155600101612862565b6001600160e01b031981168114610c5c57600080fd5b60006020828403121561289e57600080fd5b813561154c81612876565b60005b838110156128c45781810151838201526020016128ac565b838111156114645750506000910152565b600081518084526128ed8160208601602086016128a9565b601f01601f19169290920160200192915050565b60208152600061154c60208301846128d5565b60006020828403121561292657600080fd5b5035919050565b80356001600160a01b038116811461294457600080fd5b919050565b6000806040838503121561295c57600080fd5b6129658361292d565b946020939093013593505050565b60008060006060848603121561298857600080fd5b6129918461292d565b925061299f6020850161292d565b9150604084013590509250925092565b600080602083850312156129c257600080fd5b823567ffffffffffffffff808211156129da57600080fd5b818501915085601f8301126129ee57600080fd5b8135818111156129fd57600080fd5b866020828501011115612a0f57600080fd5b60209290920196919550909350505050565b600060208284031215612a3357600080fd5b61154c8261292d565b8015158114610c5c57600080fd5b60008060408385031215612a5d57600080fd5b612a668361292d565b91506020830135612a7681612a3c565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612aad57600080fd5b612ab68561292d565b9350612ac46020860161292d565b925060408501359150606085013567ffffffffffffffff80821115612ae857600080fd5b818701915087601f830112612afc57600080fd5b813581811115612b0e57612b0e612a81565b604051601f8201601f19908116603f01168101908382118183101715612b3657612b36612a81565b816040528281528a6020848701011115612b4f57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008083601f840112612b8557600080fd5b50813567ffffffffffffffff811115612b9d57600080fd5b6020830191508360208260051b8501011115612bb857600080fd5b9250929050565b600080600060408486031215612bd457600080fd5b83359250602084013567ffffffffffffffff811115612bf257600080fd5b612bfe86828701612b73565b9497909650939450505050565b60008060208385031215612c1e57600080fd5b823567ffffffffffffffff811115612c3557600080fd5b612c4185828601612b73565b90969095509350505050565b60008060408385031215612c6057600080fd5b612c698361292d565b9150612c776020840161292d565b90509250929050565b600181811c90821680612c9457607f821691505b602082108103612cb457634e487b7160e01b600052602260045260246000fd5b50919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215612cfb57600080fd5b815161154c81612a3c565b634e487b7160e01b600052601160045260246000fd5b60008219821115612d2f57612d2f612d06565b500190565b6000816000190483118215151615612d4e57612d4e612d06565b500290565b60008351612d658184602088016128a9565b835190830190612d798183602088016128a9565b01949350505050565b600082821015612d9457612d94612d06565b500390565b600060018201612dab57612dab612d06565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082612dd757612dd7612db2565b500490565b600082612deb57612deb612db2565b500690565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b03808716835280861660208401525083604083015260806060830152612e3860808301846128d5565b9695505050505050565b600060208284031215612e5457600080fd5b815161154c81612876565b60008251612e718184602087016128a9565b919091019291505056fea2646970667358221220c35b580653be4a24afa61e99c775d67e473a604c672dfb378bc272bf7ba1e9fe64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowlistSale(uint256,bytes32[])": {
        "params": {
          "_quantity": "amount of NFTs to mint"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "details": "The initial status is Init (default as zero)"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerMint(address,uint256)": {
        "params": {
          "_quantity": "Amount of NFTs to mint"
        }
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "publicSale(uint256)": {
        "params": {
          "_quantity": "amount of NFTs to mint"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "params": {
          "baseURI_": "New base URI for the collection"
        }
      },
      "setStatus(uint256)": {
        "details": "Only by the owner",
        "params": {
          "_newStatus": "New minting status"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawERC20(address,uint256)": {
        "params": {
          "_amount": "amount to withdraw",
          "_token": "ERC20 to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "airdropClaim(bytes32[])": {
        "notice": "Claimable NFTs"
      },
      "allowlistSale(uint256,bytes32[])": {
        "notice": "Allowlist minting"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "ownerMint(address,uint256)": {
        "notice": "Owner minting"
      },
      "publicSale(uint256)": {
        "notice": "public sale mint. Allowed to mint several times as long as total per wallet is bellow maxPublicSale"
      },
      "setBaseURI(string)": {
        "notice": "Set the base URI for the NFTs"
      },
      "setStatus(uint256)": {
        "notice": "Change minting status"
      },
      "withdraw()": {
        "notice": "Withdraw avax by the owner"
      },
      "withdrawERC20(address,uint256)": {
        "notice": "Withdraw specificed ERC20 and amount to owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1043,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1045,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1049,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1053,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1057,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1063,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2722,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "DEG",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2739,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2741,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "mintedAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2745,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "allowlistMinted",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2749,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "airdroplistClaimed",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2753,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "mintedOnPublic",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2755,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 2757,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "airdropMerkleRoot",
        "offset": 0,
        "slot": "14",
        "type": "t_bytes32"
      },
      {
        "astId": 2759,
        "contract": "contracts/DegisNFT.sol:DegisNFT",
        "label": "allowlistMerkleRoot",
        "offset": 0,
        "slot": "15",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}